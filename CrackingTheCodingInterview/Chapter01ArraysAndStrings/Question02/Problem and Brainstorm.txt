1.2 Given two strings write a method to decidde if one is a permutation of the other.
#1 - Describe what it means for two string be a permutation of each other. Now, look at that definition you provided. Can you check the string agains that definition?
#84 - There's one solution that is O(N log N) time. Another solution uses some space, but is O(n) time.
#122 - Could a hash table be useful?
#131 - Two strings that are permutation should have the same characteres, but in different orders. Can you make the orders the same?

First obvious solution is brute forcing, get the smaller string and keep poping the last char and adding at the begging and checking if it's part of the bigger string.

// Missunderstanding
//public static bool Check(string strA, string strB)
//{
//	bool firstIsBigger = strA.Length > strB.Length;
//	string str1 = firstIsBigger ? strA : strB;
//	string str2 = !firstIsBigger ? strA : strB;
//
//	for(int i = 0; i < str2.Length; i++)
//	{
//		char lastChar = str2[str2.Lenght-1];
//		str2 = lastChar + str2.Substring(str2.Lenght-2, 1);
//		if(str1.Contains(str2))
//		{
//			return true;
//		}
//	}
//
//	return false;
//}
//
//public static bool Check(string strA, string strB)
//{
//
//	for(int i = 0; i < strA.Length; i++)
//	{
//		if(strA == strB) {
//			return true;
//		}
//
//		char tmp = strA[0];
//		strA = strA.RemoveAt(0);
//		strA += char;
//	}
//
//	return false;
//}

//No using libraries but accepting any char 
public static bool Solution1(string strA, string strB)
{
	if(strA.Length != strb.Lenght)
		return false;

	var counterA = new int[bigint.MaxValue];
	var counterB = new int[bigint.MaxValue];
	for(int i = 0; i < strA.Length; i++) {
		counterA[(int)strA[i]]++;
		counterB[(int)strB[i]]++;
	}

	if(counterA == counterB) // This won't work unless I use a for loop → No viable
		return true;
}


//No library
public static bool Solution1(string strA, string strB)
{
	if(strA.Length != strb.Lenght)
		return false;

	var counterA = new int[128]; // ASCII
	var counterB = new int[128]; // ASCII
	for(int i = 0; i < counterA.Length; i++) {
		counterA[(int)strA[i]]++;
		counterB[(int)strB[i]]++;
	}

	for(int i = 0; i < counterA.Length; i++) {
		if(counterA[i] != counterB[i])
			return false;
	}
	
	return true;
}

//No library - optimized
public static bool Solution2(string strA, string strB)
{
	if(strA.Length != strb.Lenght)
		return false;

	var counter = new int[128]; // ASCII
	for(int i = 0; i < strA.Length; i++) {
		counterA[(int)strA[i]]++;
		counterB[(int)strB[i]]--;
	}

	for(int i = 0; i < counter.Length; i++) {
		if(counter[i] != 0)
			return false;
	}
	
	return true;
}

//HashMap → Maybe optimize space
public static bool Solution3(string strA, string strB)
{
	if(strA.Length != strb.Lenght)
		return false;

	var dict = new Dictionary<char, int>();
	for(int i = 0; i < strA.Length; i++) {
		if(!dict.ContainsKey(strA[i])) {
			dict.Add(strA[i], 0);
		}
		if(!dict.ContainsKey(strB[i])) {
			dict.Add(strB[i], 0);
		}
		dict[strA[i]]++;
		dict[strB[i]]--;
	}
	
	var values = dict.Value;
	for(int i = 0; i < dict.Length; i++) {
		if(values[i] != 0)
			return false;
	}
	
	return true;
}