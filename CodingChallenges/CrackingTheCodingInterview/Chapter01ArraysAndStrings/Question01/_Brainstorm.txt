What is the character encoding?		I'll use ASCII
Empty array?						Should return false

I can use one hasmap to save all seen character and check if the character is present in the hash, if it is, return false, if it's not keep going.

Time complexity:	O(n)
Space complexity:	O(n)
public bool CheckForUniqueCharacter(string text) {
	HashSet<string> characters = new HashSet<string>();
	for(int i = 0; i < text.Length; i++) {
		char character = text[i];
		if(characters.Contains(character))
			return false;

		characters.Add(character);
	}

	return false;
}


Alternative solution is create an array of boolean with all characters and store true in the index of each seen character, once we see a true before the set, we can return false


Time complexity:	O(n)
Space complexity:	O(1)
public bool CheckForUniqueCharacter(string text) {
	bool[] characters = new bool[encoding max size];
	for(int i = 0; i < text.Length; i++) {
		int charIndex = (int)text[i];
		if(characters[charIndex])
			return false;

		characters[charIndex] = true;
	}

	return false;
}


With no additional data structure?

Time complexity:	O(n²)
Space complexity:	O(1)
public bool CheckForUniqueCharacter(string text) {
	for(int i = 0; i < text.Length; i++) {
		for(int j = i+1; j < text.Length; j++) {
			if(text[i] == text[j])
				return false;
		}
	}

	return true;
}


-------------------
Pending: Using bitwise operation page 193

The solution provided only allowed lower case letters, but were not checking for it
We can allow upper and lower letters as well as numbers since all they are less than 64 that is the limit for the left operator